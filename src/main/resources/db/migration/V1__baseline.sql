-- V1__baseline.sql
-- Esquema inicial basado en las entidades actuales (compat H2 2.x y PostgreSQL)

-- =====================
-- Tabla: app_user
-- =====================
CREATE TABLE IF NOT EXISTS app_user (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR(120) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(30) NOT NULL,
  enabled BOOLEAN NOT NULL DEFAULT TRUE
);

-- =====================
-- Tabla: patient
-- =====================
CREATE TABLE IF NOT EXISTS patient (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombres VARCHAR(120) NOT NULL,
  apellidos VARCHAR(120) NOT NULL,
  rut VARCHAR(20),
  fecha_nac DATE,
  telefono VARCHAR(30),
  email VARCHAR(180),
  direccion VARCHAR(240),
  activo BOOLEAN NOT NULL DEFAULT TRUE
);

-- =====================
-- Tabla: operative
-- =====================
CREATE TABLE IF NOT EXISTS operative (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(160) NOT NULL,
  lugar VARCHAR(240),
  direccion VARCHAR(240),
  fecha DATE,
  observaciones VARCHAR(360),
  activo BOOLEAN NOT NULL DEFAULT TRUE
);

-- =====================
-- Tabla intermedia: patient_operative (ManyToMany)
-- =====================
CREATE TABLE IF NOT EXISTS patient_operative (
  patient_id BIGINT NOT NULL,
  operative_id BIGINT NOT NULL,
  PRIMARY KEY (patient_id, operative_id)
);

-- FKs para patient_operative
DO $do$
BEGIN
  -- Postgres-compatible ADD CONSTRAINTs si no existen (H2 ignora DO $)
  BEGIN
    ALTER TABLE patient_operative
      ADD CONSTRAINT fk_patient_operative_patient
      FOREIGN KEY (patient_id) REFERENCES patient(id);
  EXCEPTION WHEN others THEN NULL;
  END;

  BEGIN
    ALTER TABLE patient_operative
      ADD CONSTRAINT fk_patient_operative_operative
      FOREIGN KEY (operative_id) REFERENCES operative(id);
  EXCEPTION WHEN others THEN NULL;
  END;
END; $do$;

-- =====================
-- Tabla: prescription
-- =====================
CREATE TABLE IF NOT EXISTS prescription (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  paciente_id BIGINT NOT NULL,
  od_esfera DOUBLE PRECISION,
  od_cilindro DOUBLE PRECISION,
  od_eje INTEGER,
  oi_esfera DOUBLE PRECISION,
  oi_cilindro DOUBLE PRECISION,
  oi_eje INTEGER,
  add_power DOUBLE PRECISION,
  observaciones VARCHAR(360),
  fecha DATE,
  activo BOOLEAN NOT NULL DEFAULT TRUE
);

-- FK prescription -> patient (pgsql safe)
DO $do$
BEGIN
  BEGIN
    ALTER TABLE prescription
      ADD CONSTRAINT fk_prescription_patient
      FOREIGN KEY (paciente_id) REFERENCES patient(id);
  EXCEPTION WHEN others THEN NULL;
  END;
END; $do$;

-- =====================
-- Tabla: invoice
-- =====================
CREATE TABLE IF NOT EXISTS invoice (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  paciente_id BIGINT NOT NULL,
  prescription_id BIGINT,
  fecha DATE NOT NULL,
  total INTEGER NOT NULL,
  detalle VARCHAR(360),
  anulado BOOLEAN NOT NULL DEFAULT FALSE
);

-- FKs invoice -> patient, prescription
DO $do$
BEGIN
  BEGIN
    ALTER TABLE invoice
      ADD CONSTRAINT fk_invoice_patient
      FOREIGN KEY (paciente_id) REFERENCES patient(id);
  EXCEPTION WHEN others THEN NULL;
  END;

  BEGIN
    ALTER TABLE invoice
      ADD CONSTRAINT fk_invoice_prescription
      FOREIGN KEY (prescription_id) REFERENCES prescription(id);
  EXCEPTION WHEN others THEN NULL;
  END;
END; $do$;

-- =====================
-- Tabla: audit_log
-- =====================
CREATE TABLE IF NOT EXISTS audit_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  usuario VARCHAR(120),
  accion VARCHAR(120),
  entidad VARCHAR(120),
  entidad_id BIGINT,
  detalle VARCHAR(500),
  fecha TIMESTAMP
);


