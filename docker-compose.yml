services:
  db:
    image: postgres:16-alpine
    container_name: letelier-db
    environment:
      POSTGRES_DB: letelier
      POSTGRES_USER: letelier
      POSTGRES_PASSWORD: letelier
    # Mantener Postgres solo en la red interna de Docker (no publicar al host)
    # Si realmente necesitas conectarte desde el host, publica 5432 temporalmente.
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - db-data:/var/lib/postgresql/data

  app:
    build: .
    container_name: letelier-app
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_URL: jdbc:postgresql://db:5432/letelier
      DB_USER: letelier
      DB_PASS: letelier
      # Ajusta CORS si expones públicamente
      # Ajusta CORS si expones públicamente
      APP_CORS_ORIGINS: http://localhost:8080
      # Confiar en headers del proxy y fijar cookies seguras detrás de Cloudflare/HTTPS
      SERVER_FORWARD_HEADERS_STRATEGY: framework
      SERVER_SERVLET_SESSION_COOKIE_SECURE: "true"
      # Si frontend y API están en el mismo host, Lax está bien. Para cross-site, usa None.
      SERVER_SERVLET_SESSION_COOKIE_SAME_SITE: ${SESSION_SAME_SITE:-Lax}
      # Permite fijar orígenes CORS vía system property sin tocar código.
      # Establece PUBLIC_ORIGIN en tu entorno (p.ej. https://tu-dominio) o deja * por ahora.
      JAVA_TOOL_OPTIONS: "-Dapp.cors.allowed-origins=${PUBLIC_ORIGIN:-*} -Dserver.forward-headers-strategy=framework"
    expose:
      - "8080"

  proxy:
    image: nginx:alpine
    container_name: letelier-proxy
    restart: unless-stopped
    ports:
      - "8080:80"  # Cloudflare Tunnel points here
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/maintenance.html:/usr/share/nginx/html/maintenance.html:ro
      - ./nginx/static:/usr/share/nginx/html/static:ro

volumes:
  db-data:

